local enable_debug = false
local disable_addon = false --disable player suicide induction to debug psy damage

local function printf(s, ...)
	if enable_debug then
		_G.printf("Gunslinger Controller: " .. s, ...)
	end
end

local try = try or function(func, ...)
	local status, error_or_result = pcall(func, ...)
	if not status then
		printf(error_or_result)
		return false, status, error_or_result
	else
		return error_or_result, status
	end
end

local wct = weapon_cover_tilt
local dte = demonized_time_events

local actor_sounds = {
	"gunslinger_controller\\actor\\sanity_1",
	"gunslinger_controller\\actor\\sanity_2",
	"gunslinger_controller\\actor\\sanity_3",
	"gunslinger_controller\\actor\\sanity_4",
	"gunslinger_controller\\actor\\sanity_5",
	"gunslinger_controller\\actor\\sanity_6",
	"gunslinger_controller\\actor\\sanity_7",
	"gunslinger_controller\\actor\\sanity_8",
	"gunslinger_controller\\actor\\sanity_9",
}
local actor_sound
local psy_sounds = {
	"gunslinger_controller\\actor\\psy_1"
}
local psy_sound

local get_safe_sound_object = xr_sound.get_safe_sound_object
local function play_sound_on_actor(snd, volume, frequency)
	if not snd then
		return
	end
	local snd = get_safe_sound_object(snd)
	if snd then
		snd:play(db.actor, 0, sound_object.s2d)
		snd.volume = volume or 1
		snd.frequency = frequency or 1
		return snd
	end
end

local c_id_ppe_blur = 5700
local c_id_ppe_snd_shock = 5707

local pp_effectors_active = false
function add_pp_effectors()
	if not pp_effectors_active then
		level.add_pp_effector("blur.ppe", c_id_ppe_blur, true)
    	level.add_pp_effector("snd_shock.ppe", c_id_ppe_snd_shock, true)
    	pp_effectors_active = true
    end
end

function remove_pp_effectors()
	if pp_effectors_active then
		level.remove_pp_effector(c_id_ppe_blur)
    	level.remove_pp_effector(c_id_ppe_snd_shock)
    	pp_effectors_active = false
    end
end

function set_pp_effectors_factor(f)
	level.set_pp_effector_factor(c_id_ppe_blur, f)
	level.set_pp_effector_factor(c_id_ppe_snd_shock, f)
end

local function get_value(t)
	return type(t) == "table" and dup_table(t) or t
end

local function array_keys(t, sorted, sort_func)
	local res = {}
	local res_count = 1
	for k, v in pairs(t) do
		res[res_count] = k
		res_count = res_count + 1
	end
	if sorted then
		if sort_func then
			table.sort(res, sort_func)
		else
			table.sort(res)
		end
	end
	return res
end

local function bisect_left(a, x, lo, hi)
	local lo = lo or 1
	local hi = hi or #a
	
	if lo < 0 then
		printf('bisect, lo must be non-negative')
		return
	end

	while lo < hi do
		local mid = math.floor((lo + hi) * 0.5)
		if a[mid] < x then 
			lo = mid+1
		else
			hi = mid
		end
    end

	return lo
end

local function lookup(t, key, tkeys)
	if is_empty(t) then return 0 end

	if not tkeys then
		local tkeys = array_keys(t, true)
	end

	local tkeys_len = #tkeys
	if key <= tkeys[1] then return get_value(t[tkeys[1]]) end
	if key >= tkeys[tkeys_len] then return get_value(t[tkeys[tkeys_len]]) end

	local where = bisect_left(tkeys, key)
    local lo = tkeys[where-1] or tkeys[where]
    local hi = tkeys[where]
    if lo == hi then return get_value(t[lo]) end

    local delta = (key - lo) / (hi - lo)
    if type(t[lo]) ~= "table" then
	    local res = delta * t[hi] + (1 - delta) * t[lo]

	    --printf(res)
	    return res
	else
		local res = {}
	    for i = 1, #t[lo] do
	    	res[i] = delta * t[hi][i] + (1 - delta) * t[lo][i]
	    end
	    return res
	end
end

--EMA smoothing for changing values, frame independent
local default_smoothing = 11.5
local smoothed_values = {}

local function ema(key, value, def, steps, delta)
	local steps = steps or default_smoothing
	local delta = delta or steps
	local smoothing_alpha = 2.0 / (steps + 1)

	smoothed_values[key] = smoothed_values[key] and smoothed_values[key] + math.min(smoothing_alpha * (delta / steps), 1) * (value - smoothed_values[key]) or def or value

	--printf("EMA fired, key %s, target %s, current %s, going %s", key, value, smoothed_values[key], (value > smoothed_values[key] and "up" or "down"))
	return smoothed_values[key]
end

local function reset_ema()
	smoothed_values["controller_coeff_roll"] = nil
	smoothed_values["controller_coeff_yaw"] = nil
	for i = 1, 3 do
		smoothed_values["offsets"..i] = nil
	end
end

local function lerp(a, b, f)
	if a and b and f then
		return a + f * (b - a)
	else
		return a or b or 0
	end
end

-- Params
local max_deg = 100 -- Max deg of gun Y rotation
local max_coeff = max_deg / 75 -- Max value of coeff, 75 is WCT default
local coeff = 0 -- Progress of suicide animation in terms of 0 to max_coeff
local normalized_coeff = 0 -- Normalized coeff from 0 to 1
local up_increment = 0.00018 * max_coeff -- Increment of coeff
local down_increment = 0.00027 * max_coeff -- Decrement of coeff
local coeff_for_effectors = 0.25 -- At this coeff effectors kick in
local coeff_for_block_fire = 0.12 -- At this coeff weapon wont be allowed to fire
local speed_coeff = 0.725 -- Speed decrease under controller
local under_controller_radius = 10 -- Radius of controller to trigger suicide anim

-- Square radius for cheaper distance calc
under_controller_radius = under_controller_radius * under_controller_radius 

local detector_hidden = false
local suicide_time = 500 -- Extra time when coeff = 1 for last chance to evade
local suicide_countdown = 0

local offset_luts = {
	pistol = {
		[0] = {0, 0, 0},
		[max_deg] = {-0.05, -0.17, -0.12},
	},
	pistol_silenced = {
		[0] = {0, 0, 0},
		[max_deg] = {-0.05, -0.21, -0.12},
	},
	rifle = {
		[0] = {0, 0, 0},
		[max_deg] = {-0.05, -0.23, -0.12},
	},
	rifle_silenced = {
		[0] = {0, 0, 0},
		[max_deg] = {-0.05, -0.29, -0.12},
	},
}
local offset_luts_keys = (function()
	local t = {}
	for k, v in pairs(offset_luts) do
		t[k] = array_keys(v, true)
	end
	return t
end)()

local under_controller = false

function block_cover_tilt(wpn, flags)
	if coeff > 0 then
		flags.enabled = false
	end
end

function actor_on_weapon_before_fire(flags)
	if normalized_coeff > coeff_for_block_fire then
		flags.ret_value = false
	end
end

function IsFirearm(wpn)
	return IsWeapon(wpn) and not (IsMelee(wpn) or IsItem("fake_ammo_wpn", wpn:section()) or wct.IsBinoc(wpn:section()))
end

function set_under_controller()
	if not under_controller then
		RegisterScriptCallback("actor_on_update", actor_on_update)
		under_controller = true
		local actor = db.actor
		local active_item = actor:active_item()
		if not (active_item and IsFirearm(active_item))  then
			local slot_check = {2, 3, 1, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13}
			for i, v in ipairs(slot_check) do
				local item = actor:item_in_slot(v)
				if item and IsFirearm(item) then
					actor:activate_slot(v)
					return
				end
			end
			actor:iterate_inventory(function(owner, item)
				if item and IsFirearm(item) then
					actor:make_item_active(item)
					return
				end
			end)
		end
	end
end

function unset_under_controller()
	if under_controller then
		under_controller = false
	end
end

function reset()
	wct.set_force_disabled(false)
	wct.remove_roll_yaw()
	wct.set_custom_offsets()
	reset_ema()
	remove_pp_effectors()
	speed.remove_speed("gunslinger_controller")
	game.only_allow_movekeys(false)
	game.set_actor_allow_ladder(true)
	UnregisterScriptCallback("actor_on_update", actor_on_update)

	if actor_sound and actor_sound:playing() then
		actor_sound:stop()
	end
	actor_sound = nil

	if psy_sound and psy_sound:playing() then
		psy_sound:stop()
	end
	psy_sound = nil

	detector_hidden = false
	under_controller = false
	coeff = 0
	normalized_coeff = 0
	suicide_countdown = 0
end

local psy_table
function get_psy_table()
    local m_data = alife_storage_manager.get_state() 
    arszi_psy.save_state(m_data)
    psy_table = m_data.psy_table
end

function change_psy_health(amount)
	psy_table.actor_psy_health = psy_table.actor_psy_health + amount
end

function get_psy_protection()
	local hit_type_rad = HitTypeID["Telepatic"]
	local actor = db.actor

	--Calculate new power
	local hit_additional = 0

	-- Outfit protection
	local outfit = actor:item_in_slot(7)
	if outfit then
		local c_obj = outfit:cast_CustomOutfit()
		local prot = c_obj and c_obj:GetDefHitTypeProtection(hit_type_rad) or 0

		hit_additional = hit_additional + prot * 7.5
	end

	-- Helmet protection
	local helm = actor:item_in_slot(12)
	if helm then
		local c_obj = helm:cast_Helmet()
		local prot = c_obj and c_obj:GetDefHitTypeProtection(hit_type_rad) or 0

		hit_additional = hit_additional + ((prot * 10) ^ 2 / 10) * 7.5
	end

	-- Artefacts protection
	actor:iterate_belt(function(owner, obj)
		local sec = obj:section()
		local cond = obj:condition()
		local immunities_sec = SYS_GetParam(0, sec, "hit_absorbation_sect", sec)
		local prot = SYS_GetParam(2, immunities_sec, "telepatic_immunity", 0) * cond

		hit_additional = hit_additional + prot * 19
	end)

	-- Booster protection
	actor:cast_Actor():conditions():BoosterForEach(function(booster_type, booster_time, booster_value)
		-- printf("%s, %s, %s", booster_type, booster_time, booster_value)
		if booster_type == BoosterID["TelepaticProtection"] then
			-- printf("booster_value %s", booster_value)
			hit_additional = hit_additional + booster_value * 33
		end
	end)

	-- Final modifier
	hit_additional = hit_additional * 0.65
	local hit_modifier = hit_additional >= 0 and 1 + hit_additional or 1 / (1 - hit_additional)
	return hit_modifier
end

function update_controller_state()
	local actor = db.actor

	local delta = device().time_delta
	local up_increment = up_increment / get_psy_protection()
	local diff = (under_controller and up_increment or -down_increment) * delta
	local c = clamp(coeff + diff, 0, max_coeff)
	coeff = ema("controller_coeff", c, c, 1)
	normalized_coeff = normalize(coeff, 0, max_coeff)

	if coeff > 0 then
		wct.set_force_disabled()
		local current_deg = max_deg * normalized_coeff

		local det_active = actor:active_detector()
		if det_active and not detector_hidden then
			detector_hidden = true
			det_active:switch_state(2)
		end

		local vol = normalized_coeff ^ 2
		if not (actor_sound and actor_sound:playing()) then
			local s = actor_sounds[math.random(#actor_sounds)]
			actor_sound = play_sound_on_actor(s, vol)
		else
			actor_sound.volume = vol
		end

		local psy_vol = normalized_coeff
		if not (psy_sound and psy_sound:playing()) then
			local s = psy_sounds[math.random(#psy_sounds)]
			psy_sound = play_sound_on_actor(s, psy_vol)
		else
			psy_sound.volume = psy_vol
		end

		if axr_main.weapon_is_zoomed then
			if (get_console():get_bool("wpn_aim_toggle")) then
				level.press_action(bind_to_dik(key_bindings.kWPN_ZOOM))
			else
				level.release_action(bind_to_dik(key_bindings.kWPN_ZOOM))
			end
		end

		speed.add_speed("gunslinger_controller", speed_coeff, false)
		if normalized_coeff > coeff_for_block_fire then
			game.only_allow_movekeys(true)
			game.set_actor_allow_ladder(false)
		end

		if normalized_coeff > coeff_for_effectors then
			add_pp_effectors()
			set_pp_effectors_factor(normalize(normalized_coeff, coeff_for_effectors, 1))
		else
			remove_pp_effectors()
		end

		local wpn = actor:active_item()
		if not wpn then
			return under_controller and change_psy_health(-up_increment / max_coeff * delta)
		end

		if not IsFirearm(wpn) then
			return under_controller and change_psy_health(-up_increment / max_coeff * delta)
		end

		local sec = wpn:section()
		local hud_sec = SYS_GetParam(0, sec, "hud")
		if not hud_sec then
			return under_controller and change_psy_health(-up_increment / max_coeff * delta)
		end

		wct.add_to_weapon_table(sec)
		local roll = ema("controller_coeff_roll", math.random(-10, 10), 0, 11, delta)
		local yaw = ema("controller_coeff_yaw", math.random(-5, 5), 0, 11, delta)
		wct.set_roll(roll)
		wct.set_yaw(yaw)

		local is_pistol = SYS_GetParam(0, sec, "kind", "") == "w_pistol" and not wct.not_pistol_sec[sec]
		local is_silenced = wct.isSilencedWeapon(wpn)
		local lut_key
		if is_silenced then
			lut_key = is_pistol and "pistol_silenced" or "rifle_silenced"
		else
			lut_key = is_pistol and "pistol" or "rifle"
		end
		local offset_lut = offset_luts[lut_key]
		local offset_lut_keys = offset_luts_keys[lut_key]	
		local offsets = lookup(offset_lut, current_deg, offset_lut_keys)

		for i = 1, 3 do
			-- if 	weapon_cover_tilt_positions
			-- and weapon_cover_tilt_positions.weapon_offsets
			-- and weapon_cover_tilt_positions.weapon_offsets[sec] then
			-- 	local t = {"x", "y", "z"}
			-- 	local o = weapon_cover_tilt_positions.weapon_offsets[sec][t[i]] or 0
			-- 	if t[i] == "y" then
			-- 		if current_deg < 90 then
			-- 			o = lerp(0, o, coeff)
			-- 		else
			-- 			local d = o * 90 / 75
			-- 			o = lerp(d, 0, normalize(current_deg, 90, 180))
			-- 		end
			-- 		-- offsets[i] = offsets[i] - o * 0.5
			-- 	end
				
			-- end
			offsets[i] = ema("offsets"..i, offsets[i], 0, 15, delta)
		end
		wct.set_custom_offsets(offsets[1], offsets[2], offsets[3])

		local new_pos, new_ori = wct.calculate_new_position(wpn, sec, coeff, delta, 10)
		wct.enable_tilt(sec, wpn)
		wct.set_weapon_position(sec, new_pos, new_ori)

		if coeff == max_coeff then
			suicide_countdown = suicide_countdown + delta
			if suicide_countdown > suicide_time then
				printf("boom shakalaka")
				reset()
				local snd = (function()
					local def = "weapons\\ak74\\ak74_shoot"
					local snds = is_silenced and {"snd_silncer_shot_actor", "snd_silncer_shot", "snd_shoot_actor", "snd_shoot"} or {"snd_shoot_actor", "snd_shoot"}
					for i, v in ipairs(snds) do
						local s = SYS_GetParam(0, sec, v)
						if s then
							if ini_sys:section_exist(s) then
								s = SYS_GetParam(0, s, "snd_1_layer", s)
							end
							s = get_safe_sound_object(s)
							if s then
								return s
							end
						end
					end
					return get_safe_sound_object(def)
				end)()
				if snd then
					snd:play(actor, 0, sound_object.s2d)
					snd.volume = 1
					snd.frequency = 1
				end
				actor:set_health_ex(0)
			end
		else
			suicide_countdown = 0
		end
	else
		reset()
	end
end

local controller_table = {}

function check_controllers()
	local under_radius = false
	if level_environment.is_actor_immune() or arszi_psy.is_actor_zombied() or disable_addon then
		return
	end
	for k, v in pairs(controller_table) do
		local obj = level.object_by_id(k)
		if obj then
			if not (obj.alive and obj:alive()) then
				controller_table[k] = nil
			elseif obj:get_enemy() and obj:position():distance_to_sqr(db.actor:position()) < under_controller_radius then
				-- printf("under controller radius, %s < %s", obj:position():distance_to_sqr(db.actor:position()), under_controller_radius)
				under_radius = true
				break
			end
		end
	end

	if under_radius then
		set_under_controller()
	else
		unset_under_controller()
	end
end

function actor_on_update()
	try(function()
		update_controller_state()
	end)
end

function monster_on_net_spawn(obj, se_obj)
	if not (
		obj
	and obj:clsid() == clsid.controller_s
	and obj.alive and obj:alive()
		)
	then
		return
	end

	printf("adding controller %s", obj:name())
	controller_table[obj:id()] = obj:id()
end

function monster_on_net_destroy(obj)
	controller_table[obj:id()] = nil
end

function monster_on_death_callback(obj)
	controller_table[obj:id()] = nil
end

function actor_on_first_update()
	get_psy_table()
	RegisterScriptCallback("actor_on_update", check_controllers)
end

function on_game_start()
	assert(weapon_cover_tilt and weapon_cover_tilt.VERSION and weapon_cover_tilt.VERSION >= 9, "Gunslinger Controller ERROR: Weapon Cover Tilt UPDATE 9 or upper is required for Gunslinger Controller mod")
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
	RegisterScriptCallback("monster_on_net_spawn", monster_on_net_spawn)
	RegisterScriptCallback("monster_on_net_destroy", monster_on_net_destroy)
	RegisterScriptCallback("monster_on_death_callback", monster_on_death_callback)
	RegisterScriptCallback("actor_on_weapon_before_fire", actor_on_weapon_before_fire)
	wct.add_callback("actor_on_weapon_before_tilt", block_cover_tilt)
end

-- Patches
-- Disable controller psy aura in arszi_controller
if arszi_controller then
	arszi_controller.manage_controller_psy_aura = function() end
end

-- Debug
function get_animation_time(down)
	return down and max_coeff / down_increment or max_coeff / (up_increment / get_psy_protection()) + suicide_time
end
