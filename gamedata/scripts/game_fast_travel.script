------------------------------
-- Fast Travel system
-- author: Alundaio
-- Modified: sLoPpYdOtBiGhOlE (marker names, menu and config options, etc)
------------------------------
local enabled = 0
local combattravel = false
local onunderground = false
local weighttravel = false
local damagetravel = false
local stormtravel = false
local longnames = false
local markermessage = false
local notime = false
local tsmarts = nil

-- Any non-listed map is a weight 1 map
local map_weight = {
    ["l10_red_forest"] = 2,
    ["l10_limansk"] = 2,
    ["l10_radar"] = 2,
    ["jupiter"] = 2,
    ["zaton"] = 2,
    ["pripyat"] = 3,
    ["l11_pripyat"] = 3,
    ["l11_hospital"] = 3,
    ["l12_stancia"] = 3,
    ["l12_stancia_2"] = 3,
    ["l13_generators"] = 3,
}

-- Hours * 10 to traven inside a <Weight> map (random limits)
local in_map_travel_times_by_weight = {
    [1] = {5,25},
    [2] = {25,60},
    [3] = {35,90},
}

-- Hours * 10 to travel between <Weight>-<Weight> map (random limits)
local between_map_travel_times_by_weight = {
    ["1-1"] = {25,50},
    ["1-2"] = {45,80},
    ["1-3"] = {115,180},
    ["2-2"] = {55,90},
    ["2-3"] = {65,100},
    ["3-3"] = {65,120},
}

local restricted_areas = {
	["jupiter_underground"] = true,
	["l03u_agr_underground"] = true,
	["l04u_labx18"] = true,
	["l08u_brainlab"] = true,
	["l10u_bunker"] = true,
	["l12u_control_monolith"] = true,
	["l12u_sarcofag"] = true,
	["l13u_warlab"] = true,
	["labx8"] = true,
}

function is_restricted_map(actual_map)
    if restricted_areas[actual_map] then
        return true
    end
    return false
end

local function bbp_extra_weight()
	local w = 0
	
	local function itr(npc,itm)
		if (npc:is_on_belt(itm)) then
			w = w + (itm and ((ini_sys:r_float_ex(itm:section(),"additional_inventory_weight") or 0) * itm:condition()) or 0)
		end
	end
	db.actor:iterate_inventory(itr,db.actor)
	
	local bkpk = db.actor:item_in_slot(13)
	w = w + (bkpk and ini_sys:r_float_ex(bkpk:section(),"additional_inventory_weight") or 0)
	
	return w
end

local function map_spot_menu_add_property(property_ui,id,level_name)
	local se_obj = id > 0 and alife_object(id)
	if not (se_obj) then
		return
	end
	if (DEV_DEBUG) or (enabled > 0 and se_obj:clsid() == clsid.smart_terrain and tsmarts[se_obj:name()]) then
		if (longnames) then
				property_ui:AddItem(game.translate_string("st_pda_fast_travel_to").." ".. game.translate_string(level_name).." "..game.translate_string(se_obj:name()))
		else
				property_ui:AddItem(game.translate_string("st_pda_fast_travel_to").." "..game.translate_string(se_obj:name()))
		end
	end
end

local function map_spot_menu_property_clicked(property_ui,id,level_name,prop)
	local se_obj = alife_object(id)
	if not (se_obj) then
		return
	end

	if (longnames) then
		if (prop ~= (game.translate_string("st_pda_fast_travel_to").." "..game.translate_string(level_name).." "..game.translate_string(se_obj:name()))) then
			return
		end
	else
		if (prop ~= (game.translate_string("st_pda_fast_travel_to").." "..game.translate_string(se_obj:name()))) then
			return
		end
	end

	-- Prevent fast travel if in restricted area
	if not (onunderground) then
		if (is_restricted_map(level.name())) then
			hide_hud_pda()
			actor_menu.set_msg(1, game.translate_string("st_travel_restricted_area"),4)
			return
		end
	end

	-- Prevent fast travel if in combat.
	if not (combattravel) then
		if not (is_empty(xr_combat_ignore.fighting_with_actor_npcs)) then
			hide_hud_pda()
			actor_menu.set_msg(1, game.translate_string("st_travel_event"),4)
			return
		end
	end

	-- Prevent fast travel while overloaded.
	if not (weighttravel) then
		local suit = db.actor:item_in_slot(7)
		local diff = db.actor:get_total_weight() - db.actor:get_actor_max_walk_weight() - (suit and suit:get_additional_max_weight() or 0) - bbp_extra_weight()
		if diff > 0 then
			hide_hud_pda()
			actor_menu.set_msg(1, game.translate_string("st_travel_overloaded"),4)
			return
		end
	end

	-- Prevent fast travel if bleeding and/or iradiated.
	if not (damagetravel) then
		local bleeding = db.actor.bleeding > 0
		local radiation = db.actor.radiation > 0
		if (bleeding or radiation) then
			if (bleeding and radiation) then
				actor_menu.set_msg(1, game.translate_string("st_sleep_bleeding_irradiated"),5)
			elseif (bleeding) then
				actor_menu.set_msg(1, game.translate_string("st_sleep_bleeding"),4)
			elseif (radiation) then
				actor_menu.set_msg(1, game.translate_string("st_sleep_irradiated"),4)
			end
			hide_hud_pda()
			return
		end
	end

	-- Prevent fast travel if an emission or psi-storm currently ongoing.
	if not (stormtravel) then
		if (xr_conditions.surge_started() or psi_storm_manager.is_started()) then
			actor_menu.set_msg(1, game.translate_string("st_travel_event"),4)
			hide_hud_pda()
			return
		end
	end

	-- forward time when traveling
	if not (notime) then
        local actal_map_weight = map_weight[level.name()] or 1
        local destination_map_weight = map_weight[level_name] or 1
        local min_map_weight = math.min(actal_map_weight, destination_map_weight)
        local max_map_weight = math.max(actal_map_weight, destination_map_weight)
        local between_map_code = tostring(min_map_weight).."-"..tostring(max_map_weight)
        local min_hours = 0
        local max_hours = 1

        if (level.name() == level_name) then
            min_hours = in_map_travel_times_by_weight[max_map_weight][1]
            max_hours = in_map_travel_times_by_weight[max_map_weight][2]
        else
            min_hours = between_map_travel_times_by_weight[between_map_code][1]
            max_hours = between_map_travel_times_by_weight[between_map_code][2]
        end

		local time_division_factor = 10 + ((spatial_anomalies.compass_on_belt_status > 0) and 5 or 0)
        local travel_hours = math.ceil(math.random(min_hours, max_hours) / time_division_factor)
        local travel_minutes = math.random(1,59)
		level.change_game_time(0, travel_hours, travel_minutes)
		surge_manager.get_surge_manager().time_forwarded = true
		psi_storm_manager.get_psi_storm_manager().time_forwarded = true
		level_weathers.get_weather_manager():forced_weather_change()
	end

	if (se_obj.online) then
		db.actor:set_actor_position(se_obj.position)
		hide_hud_pda()
	else
		ChangeLevel(se_obj.position, se_obj.m_level_vertex_id, se_obj.m_game_vertex_id, VEC_ZERO, true)
	end
end

-- Used for Visit_Only mode, catches the player near the marker and updates things.
local function actor_on_interaction(typ, obj, name)
	if (enabled ~= 1) then
		return
	end
	
	if (typ ~= "smarts") then
		return
	end
	
	if not (tsmarts[name]) then
		return
	end
	
	if (level.map_has_object_spot(obj.id, "fast_travel") == 0) then
		if (longnames) then
			local smart = alife():object(obj.id)
			local level_name = alife():level_name(smart and game_graph():vertex(smart.m_game_vertex_id):level_id())			
			level.map_add_object_spot(obj.id, "fast_travel", game.translate_string(level_name).." "..game.translate_string(name))
			if (markermessage) then
				actor_menu.set_msg(1, game.translate_string(level_name).." "..game.translate_string(name).." "..game.translate_string("st_fast_travel_discovered"), 4)
			end
		else
			level.map_add_object_spot(obj.id, "fast_travel", game.translate_string(name))
			if (markermessage) then
				actor_menu.set_msg(1, game.translate_string(name).." "..game.translate_string("st_fast_travel_discovered"), 4)
			end
		end
	end
end

local st_list_1 = game.translate_string("ui_mm_travel_list_1")
function update_settings()
	enabled = ui_options.get("gameplay/fast_travel/state")
	combattravel = ui_options.get("gameplay/fast_travel/on_combat")
	onunderground = ui_options.get("gameplay/fast_travel/on_underground")
	weighttravel = ui_options.get("gameplay/fast_travel/on_overweight")
	damagetravel = ui_options.get("gameplay/fast_travel/on_damage")
	stormtravel = ui_options.get("gameplay/fast_travel/on_emission")
	longnames = ui_options.get("gameplay/fast_travel/long_names")
	markermessage = ui_options.get("gameplay/fast_travel/visit_message")
	notime = ui_options.get("gameplay/fast_travel/time")

	local faction = character_community(db.actor):sub(7)
	local pini = ini_file("plugins\\faction_quick_travel.ltx")
	tsmarts = utils_data.collect_section(pini,faction,true)

	if not (is_empty(tsmarts)) then
		local level_name
		local sim,gg = alife(),game_graph()
		for i=1,65534 do
			local smart = sim:object(i)
			if (smart and smart:clsid() == clsid.smart_terrain and tsmarts[smart:name()]) then
				if (level.map_has_object_spot(i, "fast_travel")) then
					level.map_remove_object_spot(i, "fast_travel")
				end
				if (enabled == 1) then
					if (game_statistics.has_actor_visited_smart(smart:name()) == true) then
						if (longnames) then
							level_name = sim:level_name(smart and gg:vertex(smart.m_game_vertex_id):level_id())
							level.map_add_object_spot(i, "fast_travel", game.translate_string(level_name).." "..game.translate_string(smart:name()))
						else
							level.map_add_object_spot(i, "fast_travel", game.translate_string(smart:name()))
						end
					end
				elseif (enabled == 2) then
					if (longnames) then
						level_name = sim:level_name(smart and gg:vertex(smart.m_game_vertex_id):level_id())
						level.map_add_object_spot(i, "fast_travel", game.translate_string(level_name).." "..game.translate_string(smart:name()))
					else
						level.map_add_object_spot(i, "fast_travel", game.translate_string(smart:name()))
					end
				end
			end
		end
	end
	return true
end

function on_game_start()
	RegisterScriptCallback("map_spot_menu_add_property",map_spot_menu_add_property)
	RegisterScriptCallback("map_spot_menu_property_clicked",map_spot_menu_property_clicked)
	RegisterScriptCallback("on_game_load",update_settings)
	RegisterScriptCallback("on_option_change",update_settings)
	RegisterScriptCallback("actor_on_interaction", actor_on_interaction)
end

-- function trace_this(to_trace)
    -- local log_file = io.open("log_fast_travel.txt", "a")
    -- log_file:write(to_trace.."\n")
    -- log_file:close(log_file)
-- end
