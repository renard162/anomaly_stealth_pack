local near_water = false

local returnable_empty_canteen = {
    ["flask"] = true,
    ["dirty_water"] = true,
    ["bottle_metal"] = true
}

function return_empty_canteen(section, remaining_uses)
    if not section then return end
    if not remaining_uses then return end
    if (returnable_empty_canteen[section]) and (remaining_uses <= 0) then
        alife_create_item("empty_canteen", db.actor)
    end
end

local function actor_on_footstep(mat)
    local current_material = tostring(mat)
    local sf = string.find
    --printf(current_material)
    if sf(current_material, "water") or sf(current_material, "actor") then
        near_water = true
    else
        near_water = false
    end
end

local function actor_on_item_use(obj)
    return_empty_canteen(obj:section(), obj:get_remaining_uses())
end

-- return "use" name
function menu_fill(obj)
    local p = obj:parent()
    if not (p and p:id() == AC_ID) then return end
    local sec = obj:section()
    if sec == "empty_canteen" and near_water then return game.translate_string("st_haruka_fill") end

    return nil
end

function func_fill(obj)
    local p = obj:parent()
    if not (p and p:id() == AC_ID) then return end
    local sec = obj:section()

    if sec == "empty_canteen" and near_water then
		actor_effects.play_item_fx("matches_script")
        start(obj, sec)
    end
end

function start(obj, sec)
    alife_create_item("dirty_water", obj:parent())
    alife_release(obj)
end

function on_game_start()
    RegisterScriptCallback("actor_on_footstep", actor_on_footstep)
    RegisterScriptCallback("actor_on_item_use", actor_on_item_use)
end