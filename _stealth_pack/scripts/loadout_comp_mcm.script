local debugx = true
function pr(...)
	if not debugx then return end
	printf(...)
end

function actor_on_first_update()
	db.actor:iterate_inventory( function(temp, item)
		local squad_sec
		local item_sec = item:section()
		if item_sec and string.find(item_sec, "_comp_item") then
			pr("item_sec: [ %s ]", item_sec)
			squad_sec = item_sec:gsub("_comp_item", "")
			pr("squad_sec_after_sub: [ %s ]", squad_sec)
			alife_release(item)
			if squad_sec then
				create_companion_squad(squad_sec)
			end
		end
	end)

end

function create_companion_squad(sec)
	local pos
	local gvid = db.actor:game_vertex_id()
	local lvid = 4294967295
	repeat
		local dir = vector_rotate_y(db.actor:direction(), math.random(1, 359))
		pos = db.actor:position():add(dir:mul(math.random(1, 5)))
		lvid = level.vertex_id(pos)
	until (pos ~= nil and lvid ~= 4294967295)

	local comp_squad_x = alife_create(tostring(sec), pos, lvid, gvid)
	if not comp_squad_x then return end

	pr("# adding npc to squad_id: [ %s ], at pos: [ %s ] || lvid: [ %s ] || gvid: [ %s ]", comp_squad_x.id, pos, lvid, gvid)
	comp_squad_x:create_npc(nil, pos, lvid, gvid)

	if comp_squad_x.squad_members then
		for k in comp_squad_x:squad_members() do
			local se_npc = k.object or k.id and alife_object(k.id)
			if se_npc then
				pr("#setting some server shit")
				SIMBOARD:setup_squad_and_group(se_npc)
			end
			local function delay(id)
				if id then
					pr("#game obj id found")
					local companion = level.object_by_id(id)
					if companion then
						pr("#game obj found || setting game object relation and squad")
						companion:set_relation(game_object.friend, db.actor)
						dialogs_axr_companion.become_actor_companion(db.actor, companion)
					end
				end
				return true
			end
			CreateTimeEvent("delay_companion_squad_ev", "delay_companion_squad_ac_" .. k.id, 1, delay, k.id)
		end
	end
	
end

LoadoutCompX = ui_mm_faction_select.UINewGame.LoadLoadout
function ui_mm_faction_select.UINewGame.LoadLoadout(self, rand)
	LoadoutCompX(self, rand)

	-- Copy existing loadout
	local t_loadout, p_loadout = {}, {}
	local size_loadout = 0
	for idx, ci in pairs(self.CC["loadout"].cell) do
		size_loadout = size_loadout + 1
		t_loadout[size_loadout] = ci.section
		p_loadout[size_loadout] = ci.flags.info or 0
	end

	-- add companions
	local is_replay_mode = self.ck_states["ck_replay_mode"]
	local eco_idxs = self.selected_economy:gsub("st_econ_","") or "1"
	eco_idxs = (is_replay_mode and 1) or tonumber(eco_idxs)
	local reverse_eco_num = clamp(4 - eco_idxs, 1, 3)
	
	local has_bonus_troops = (axr_main.config:r_value("unlocked_achievment","patriarch",1) == true) and is_replay_mode
	local amount_for_each = 1 + ((has_bonus_troops and 1) or 0)	-- amount of each companion tier
	local points_per_tier = (has_bonus_troops and 1253) or 3375	-- points cost per tier

	for i = 1, reverse_eco_num do
		for j = 1, amount_for_each do
			size_loadout = size_loadout + 1
			t_loadout[size_loadout] = self.selected_faction .. "_sim_squad_comp_" .. tostring(i) .. "_comp_item"
			p_loadout[size_loadout] = i * points_per_tier
		end
	end

	-- add bonus loadout items to Tourist difficulty
	if is_replay_mode then
		local ini_bonus = ini_file("axr_options.ltx")
		local bonus_line_count = ini_bonus:line_count("unlocked_bonus_loadout") or 0
		for i=0, bonus_line_count-1 do
			local result, sec, amount = ini_bonus:r_line("unlocked_bonus_loadout" , i , "", "")
			if ini_sys:section_exist(sec) then
				for i=1,tonumber(amount) do
					size_loadout = size_loadout + 1
					t_loadout[size_loadout] = sec
					p_loadout[size_loadout] = 10
				end
			else
				printf("~Bonus item does not exist: "..sec)
			end
		end
	end

	-- reinit loadout
	self.CC["loadout"]:Reinit(t_loadout, p_loadout)
	for idx,ci in pairs(self.CC["loadout"].cell) do
		if ci:IsShown() then
			local val = ci.flags.info or 0
			ci.flags.value = val
			ci.flags.value_str = game.translate_string("st_mm_new_game_points") .. ": " .. val
		end
	end

end

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end