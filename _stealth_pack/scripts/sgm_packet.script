---==================================================================================================---
--------------------------------------------------------------------------------------------------------
----------------------------(Создание различных обьектов через NET Packet)------------------------------
--------------------------------------------------------------------------------------------------------
---==================================================================================================---
--[[
function create_anomaly(zone_name, zone_radius, lv, gv, init_data, spot)

	local sobj=alife():create(zone_name, level.vertex_position(lv), lv, gv)
	local packet=net_packet()

	packet:w_begin(0)
	sobj:STATE_Write(packet)
	packet:r_seek(2)

	local game_vertex_id=packet:r_u16()
	local cse_alife_object__unk1_f32=packet:r_float()
	local cse_alife_object__unk2_u32=packet:r_s32()
	local level_vertex_id=packet:r_s32()
	local object_flags=packet:r_s32()
	local custom_data=packet:r_stringZ()
	local story_id=packet:r_s32()
	local cse_alife_object__unk3_u32=packet:r_s32()
	local shape_count=packet:r_u8()
	
	for i=1, shape_count do
	
		local shape_type=packet:r_u8()
	   
		if shape_type == 0 then
			local center=packet:r_vec3()
			local radius=packet:r_float()
		else
			local box=packet:r_matrix()
		end
	end
	
	local restrictor_type=packet:r_u8()
	local cse_alife_custom_zone__unk1_f32=packet:r_float()
	local cse_alife_custom_zone__unk2_u32=packet:r_s32()
	local on_off_mode_enabled_time=packet:r_s32()
	local on_off_mode_disabled_time=packet:r_s32()
	local on_off_mode_shift_time=packet:r_s32()
	local offline_interactive_radius=packet:r_float()
	local artefact_spawn_places_count=packet:r_u16()
	local cse_alife_anomalous_zone__unk1_u32=packet:r_s32()
	local last_spawn_time_present=packet:r_u8()
	
	packet:w_u16(game_vertex_id)
	packet:w_float(cse_alife_object__unk1_f32)
	packet:w_s32(cse_alife_object__unk2_u32)
	packet:w_s32(level_vertex_id)
	packet:w_s32(object_flags)
	if init_data~=nil then
		custom_data=init_data
	end
	packet:w_stringZ(custom_data)
	packet:w_s32(story_id)
	packet:w_s32(cse_alife_object__unk3_u32)
	packet:w_u8(1)
	packet:w_u8(0)
	
	local sphere_center=vector()
	
	sphere_center:set(0, 0, 0)
	packet:w_vec3(sphere_center)
	radius=zone_radius
	packet:w_float(radius)
	packet:w_u8(restrictor_type)
	packet:w_float(cse_alife_custom_zone__unk1_f32)
	cse_alife_custom_zone__unk2_u32=bit_not(0)
	packet:w_s32(cse_alife_custom_zone__unk2_u32)
	packet:w_s32(on_off_mode_enabled_time)   
        packet:w_s32(on_off_mode_disabled_time)
	packet:w_s32(on_off_mode_shift_time)
	packet:w_float(offline_interactive_radius)
	packet:w_u16(artefact_spawn_places_count)
	packet:w_s32(cse_alife_anomalous_zone__unk1_u32)
	sobj:STATE_Read(packet, packet:w_tell()-packet:r_tell())
	if exists(spot) then
		add_spot_on_map(sobj.id, spot, zone_name)
	end
	return sobj
end
--]]


function r_shape(packet)

	local s
	local st = {}
		st.count = packet:r_u8()
		st.shapes = {}
	for i=1, st.count do
		s = {}
			s.type = packet:r_u8()
		if s.type == 0 then
			s.center = packet:r_vec3()
			s.radius = packet:r_float()
		else
			s.axis_x = packet:r_vec3()
			s.axis_y = packet:r_vec3()
			s.axis_z = packet:r_vec3()
			s.offset = packet:r_vec3()
		end
		st.shapes[i] = s
	end
	return st
end



function w_shape(packet, st)

	local s
	
	packet:w_u8(st.count)
	for i=1, st.count do
		s = st.shapes[i]
		packet:w_u8(s.type)
		if s.type == 0 then
			packet:w_vec3(s.center)
			packet:w_float(s.radius)
		else
			packet:w_vec3(s.axis_x)
			packet:w_vec3(s.axis_y)
			packet:w_vec3(s.axis_z)
			packet:w_vec3(s.offset)
		end
	end
end



function setup_restrictor(se_obj, custom, radius, x, y, z, lv, gv)

	local packet = net_packet()
	
	se_obj:STATE_Write(packet)
	
	local game_vertex_id	= packet:r_u16()
	local distance		= packet:r_float()
	local direct_control	= packet:r_s32()
	local level_vertex_id	= packet:r_s32()
	local object_flags	= packet:r_s32()
	local custom_data	= packet:r_stringZ()
	local story_id		= packet:r_s32()
	local spawn_story_id	= packet:r_s32()
	local shape		= r_shape(packet)
	local restrictor_type	= packet:r_u8()
	
	custom_data = custom
	shape = {}
		shape.count = 1
		shape.shapes = {}
		shape.shapes[1] = {}
		shape.shapes[1].type = 0
		shape.shapes[1].center = vector():set(0,0,0)
		shape.shapes[1].radius = radius
	packet:w_u16(game_vertex_id)
	packet:w_float(distance)
	packet:w_s32(direct_control)
	packet:w_s32(level_vertex_id)
	packet:w_s32(object_flags)
	packet:w_stringZ(custom_data)
	packet:w_s32(story_id)
	packet:w_s32(spawn_story_id)
	w_shape(packet, shape)
	packet:w_u8(restrictor_type)
	se_obj:STATE_Read(packet, packet:w_tell() - packet:r_tell())
	return sobj
end