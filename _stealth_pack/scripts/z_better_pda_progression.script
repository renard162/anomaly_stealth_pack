--[[ 
	Better PDA Progression by Coverdrave
	Allows to hide/show player and companion icons based on player's PDA version.
	
	10/09/2022
	- Release
	
	11/02/2023
	- Fix for companions icons state not being updated
	- Refactored code
	
	22/04/2023
	- Fix for crashes and inconsistent icon states
--]]

local desired_icon_states = {
	["device_pda_1"] = {
		["actor_icon"] = true,
		["companion_icons"] = false,
		["surge_danger_bar"] = false,
		["actor_arrow"] = false,
	},
	["device_pda_2"] = {
		["actor_icon"] = true,
		["companion_icons"] = true,
		["surge_danger_bar"] = false,
		["actor_arrow"] = false,
	},
	["device_pda_3"] = {
		["actor_icon"] = true,
		["surge_danger_bar"] = true,
		["companion_icons"] = true,
		["actor_arrow"] = true,
	},
}

-- Spots are defined in gamedata/configs/ui .xml files
local function switch_icon_state(id, spot, hint, enable)
	local is_spot_enabled = level.map_has_object_spot(id, spot) -- Returns 0 or 1, not true or false
	
	if enable and (is_spot_enabled == 0) then
		level.map_add_object_spot(id, spot, hint)
		
	elseif not enable and (is_spot_enabled ~= 0) then
		level.map_remove_object_spot(id, spot)
	end
end

local function process_companion_icons(enable)
	for id,v in pairs(axr_companions.non_task_companions) do
		switch_icon_state(id, "ui_pda2_companion_location", "st_ui_pda_companion", enable)
	end
	
	for id,squad in pairs(axr_companions.companion_squads) do
		if squad then
			for k in squad:squad_members() do
				switch_icon_state(k.id, "ui_pda2_companion_location", "st_ui_pda_companion", enable)
			end
		end
	end
end

local function process_icons(section)
	if not section then return end
	
	switch_icon_state(0, "actor_location", "disable_hint", desired_icon_states[section]["actor_icon"]) -- Player icon
	switch_icon_state(0, "actor_location_p", "disable_hint", desired_icon_states[section]["actor_arrow"]) -- Player arrow (direction player is facing)
	process_companion_icons(desired_icon_states[section]["companion_icons"]) -- Companion icons
end

local function get_pda_section()
	local pda = db.actor:item_in_slot(8)
	if not pda then return end
	
	return pda:section()
end

-- Runs when given companion task
local original_setup_companion_task = xr_effects.setup_companion_task
function xr_effects.setup_companion_task(actor,npc,p)
	original_setup_companion_task(actor,npc,p)
	
	local sec = get_pda_section()
	if not sec then return end
	
	-- It seems that there needs to be a delay between creating companions and changing their icon states
	CreateTimeEvent(0, "setup_companion_task_comp_icons", 1, function()
		process_companion_icons(desired_icon_states[sec]["companion_icons"])
		return true
	end)
end

-- Runs when actor recruits NPC to become his companion
local original_become_actor_companion = dialogs_axr_companion.become_actor_companion
function dialogs_axr_companion.become_actor_companion(actor,npc)
	original_become_actor_companion(actor,npc)
	
	local sec = get_pda_section()
	if not sec then return end
	
	CreateTimeEvent(0, "become_actor_companion_comp_icons", 1, function() 
		process_companion_icons(desired_icon_states[sec]["companion_icons"])
		return true
	end)
end

function is_surge_danger_bar_active()
	local sec = get_pda_section()
	if not sec then
		return false
	end
	return desired_icon_states[sec]["surge_danger_bar"] or false
end

function pda_has_battery()
	local pda = db.actor:item_in_slot(8)
	if not pda then
		return false
	end
	local sec = pda:section()
	local cond = pda:condition()
	return cond and (cond > item_device.dev_critical[sec])
end

local function actor_item_to_slot(item)
	local sec = item:section()
	
	if string.find(sec, "device_pda_") then
		process_icons(sec)
	end
end

local function on_first_key_press(dik)
	-- Register here since otherwise actor_item_to_slot is triggered while loading and breaks icons
	RegisterScriptCallback("actor_item_to_slot", actor_item_to_slot)
	process_icons(get_pda_section())
	
	UnregisterScriptCallback("on_key_press", on_first_key_press)
end

function on_game_start()
	RegisterScriptCallback("on_key_press", on_first_key_press)
end